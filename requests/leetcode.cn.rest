# problemset-question-list
POST :leetcode-rest--protocol://:leetcode-rest--host/graphql/
Content-Type: application/json
Cookie: LEETCODE_SESSION=:leetcode-rest--session; csrftoken=:leetcode-rest--csrftoken
-> jq-set-var :leetcode-rest--problemset-question-list-response {"page-info": {skip: ${:leetcode-rest--skip}, limit: ${:leetcode-rest--limit}, "page-num": .data.problemsetQuestionList.questions | length, "total-num": .data.problemsetQuestionList.total, "has-more": .data.problemsetQuestionList.hasMore}, problems: [.data.problemsetQuestionList.questions.[] | {title, paid: .paidOnly, id: .frontendQuestionId, "title-cn": .titleCn, "title-slug": .titleSlug, status, difficulty, "acceptance-rate": .acRate}]}

{
"query":"query problemsetQuestionList($categorySlug: String, $limit: Int, $skip: Int, $filters: QuestionListFilterInput) {\n  problemsetQuestionList(\n    categorySlug: $categorySlug\n    limit: $limit\n    skip: $skip\n    filters: $filters\n  ) {\n    hasMore\n    total\n    questions {\n      acRate\n      difficulty\n      freqBar\n      frontendQuestionId\n      isFavor\n      paidOnly\n      solutionNum\n      status\n      title\n      titleCn\n      titleSlug\n      topicTags {\n        name\n        nameTranslated\n        id\n        slug\n      }\n      extra {\n        hasVideoSolution\n        topCompanyTags {\n          imgUrl\n          slug\n          numSubscribed\n        }\n      }\n    }\n  }\n}\n    ",
"variables":{"categorySlug":"all-code-essentials","skip"::leetcode-rest--skip,"limit"::leetcode-rest--limit,"filters": :leetcode-rest--filters}
}

# question-tag-list
POST :leetcode-rest--protocol://:leetcode-rest--host/graphql/
Content-Type: application/json
Cookie: LEETCODE_SESSION=:leetcode-rest--session; csrftoken=:leetcode-rest--csrftoken
-> jq-set-var :leetcode-rest--question-tag-list-response [.data.questionTagTypeWithTags[] | .name as $type | .tagRelation[] | {name: .tag.name, id: .tag.id, slug: .tag.slug, type: $type}]
{
"query": "\n    query questionTagTypeWithTags {\n  questionTagTypeWithTags {\n    name\n    transName\n    tagRelation {\n      questionNum\n      tag {\n        name\n        id\n        nameTranslated\n        slug\n      }\n    }\n  }\n}\n    ", "variables": {}, "operationName": "questionTagTypeWithTags"
}

# session-progress
POST :leetcode-rest--protocol://:leetcode-rest--host/graphql/
Content-Type: application/json
Cookie: LEETCODE_SESSION=:leetcode-rest--session; csrftoken=:leetcode-rest--csrftoken
-> jq-set-var :leetcode-rest--session-progress-response { accepted: [.data.userProfileSessionProgress.numAcceptedQuestions.[] | {(.difficulty | ascii_downcase) : .count} ] | add, failed: [.data.userProfileSessionProgress.numFailedQuestions.[] | {(.difficulty | ascii_downcase) : .count} ] | add ,untouched: [.data.userProfileSessionProgress.numUntouchedQuestions.[] | {(.difficulty | ascii_downcase) : .count} ] | add, "total-submissions": .data.userProfileSessionProgress.numSubmissions , "accepted-submissions": .data.userProfileSessionProgress.numAcSubmissions} + (.data.userProfileSessionProgress.numAcSubmissions / .data.userProfileSessionProgress.numSubmissions | {"acceptance-rate" : .})
{
"operationName":"sessionProgress","variables":{},"query":"query sessionProgress {\n  userProfileSessionProgress {\n    numAcceptedQuestions {\n      difficulty\n      count\n      __typename\n    }\n    numFailedQuestions {\n      difficulty\n      count\n      __typename\n    }\n    numUntouchedQuestions {\n      difficulty\n      count\n      __typename\n    }\n    numSubmissions\n    numAcSubmissions\n    __typename\n  }\n}\n"
}


# question-content
POST :leetcode-rest--protocol://:leetcode-rest--host/graphql/
Content-Type: application/json
Cookie: LEETCODE_SESSION=:leetcode-rest--session; csrftoken=:leetcode-rest--csrftoken
-> jq-set-var :leetcode-rest--question-content-response .data.question.content
{
"query": "query questionContent($titleSlug: String!) {\n  question(titleSlug: $titleSlug) {\n    content\n    mysqlSchemas\n  }\n}\n",
"variables": {"titleSlug":":leetcode-rest--title-slug"}
}

# question-editor-data
POST :leetcode-rest--protocol://:leetcode-rest--host/graphql/
Content-Type: application/json
Cookie: LEETCODE_SESSION=:leetcode-rest--session; csrftoken=:leetcode-rest--csrftoken
-> jq-set-var :leetcode-rest--question-editor-data-response .data.question.codeSnippets.[] | select(.langSlug == "${leetcode-rest--language}").code
{
"query":"\n    query questionEditorData($titleSlug: String!) {\n  question(titleSlug: $titleSlug) {\n    questionId\n    questionFrontendId\n    codeSnippets {\n      lang\n      langSlug\n      code\n    }\n    enableRunCode\n    hasFrontendPreview\n    frontendPreviews\n  }\n}\n    ",
"variables":{"titleSlug":":leetcode-rest--title-slug"},
"operationName":"questionEditorData"
}

# submit
POST :leetcode-rest--protocol://:leetcode-rest--host/problems/:leetcode-rest--title-slug/submit/ 
Origin: :leetcode-rest--protocol://:leetcode-rest--host
Referer: :leetcode-rest--protocol://:leetcode-rest--host/problems/:leetcode-rest--title-slug
x-csrftoken: :leetcode-rest--csrftoken	
content-type: application/json
Cookie: LEETCODE_SESSION=:leetcode-rest--session; csrftoken=:leetcode-rest--csrftoken
-> jq-set-var :leetcode-rest--submit-response .submission_id
{
 "lang": ":leetcode-rest--language",
 "question_id": ":leetcode-rest--question-id",
 "typed_code": ":leetcode-rest--code"
}

# submission-status
GET :leetcode-rest--protocol://:leetcode-rest--host/submissions/detail/:leetcode--submission-id/check/
Origin: :leetcode-rest--protocol://:leetcode-rest--host
Referer: :leetcode-rest--protocol://:leetcode-rest--host/problems/:leetcode-rest--title-slug
x-csrftoken: :leetcode-rest--csrftoken	
content-type: application/json
Cookie: LEETCODE_SESSION=:leetcode-rest--session; csrftoken=:leetcode-rest--csrftoken
-> jq-set-var :leetcode-rest--submission-status-response {"code-output": .code_output, "std-output": .std_output, "last-testcase": .last_testcase, "expected-output": .expected_output, "status-msg": .status_msg, "total-correct": .total_correct, "total-testcases": .total_testcases, "runtime-percentile": .runtime_percentile, "status-memory": .status_memory, "memory-percentile": .memory_percentile, "pretty-lang": .pretty_lang, "state": .state}

# graphql-query-type
POST :leetcode-rest--protocol://:leetcode-rest--host/graphql/
Content-Type: application/json
Cookie: LEETCODE_SESSION=:leetcode-rest--session; csrftoken=:leetcode-rest--csrftoken
-> jq-set-var :leetcode-rest--graphql-query-type-response .
{"query":"query {\n  __type(name: \":leetcode-rest--graphql-type\") {\n    name\n    fields {\n      name\n      type {\n        name\n        kind\n      }\n      description\n    }\n  }\n}\n"}
